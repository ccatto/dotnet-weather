// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using weatherCatto.Data;

#nullable disable

namespace weatherCatto.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240419040647_WeatherDatasToDb")]
    partial class WeatherDatasToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.18");

            modelBuilder.Entity("weatherCatto.Models.Clouds", b =>
                {
                    b.Property<int>("CloudsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("All")
                        .HasColumnType("INTEGER");

                    b.HasKey("CloudsId");

                    b.ToTable("Clouds");
                });

            modelBuilder.Entity("weatherCatto.Models.Coord", b =>
                {
                    b.Property<int>("CoordsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Lat")
                        .HasColumnType("REAL");

                    b.Property<double>("Lon")
                        .HasColumnType("REAL");

                    b.HasKey("CoordsId");

                    b.ToTable("Coord");
                });

            modelBuilder.Entity("weatherCatto.Models.Main", b =>
                {
                    b.Property<int>("MainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Humidity")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Pressure")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<double>("feels_like")
                        .HasColumnType("REAL");

                    b.Property<double>("temp_max")
                        .HasColumnType("REAL");

                    b.Property<double>("temp_min")
                        .HasColumnType("REAL");

                    b.HasKey("MainId");

                    b.ToTable("Main");
                });

            modelBuilder.Entity("weatherCatto.Models.Sys", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<double>("Message")
                        .HasColumnType("REAL");

                    b.Property<long>("Sunrise")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Sunset")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Sys");
                });

            modelBuilder.Entity("weatherCatto.Models.Weather", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Visibility")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeatherDataWeatherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WeatherDataWeatherId");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("weatherCatto.Models.WeatherData", b =>
                {
                    b.Property<int>("WeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Base")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CloudsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Cod")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CoordsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Dt")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MainId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SysId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<long>("Visibility")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WindId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WeatherId");

                    b.HasIndex("CloudsId");

                    b.HasIndex("CoordsId");

                    b.HasIndex("MainId");

                    b.HasIndex("SysId");

                    b.HasIndex("WindId");

                    b.ToTable("weatherDatas");
                });

            modelBuilder.Entity("weatherCatto.Models.Wind", b =>
                {
                    b.Property<int>("WindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Deg")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Speed")
                        .HasColumnType("REAL");

                    b.HasKey("WindId");

                    b.ToTable("Wind");
                });

            modelBuilder.Entity("weatherCatto.Models.Weather", b =>
                {
                    b.HasOne("weatherCatto.Models.WeatherData", null)
                        .WithMany("Weather")
                        .HasForeignKey("WeatherDataWeatherId");
                });

            modelBuilder.Entity("weatherCatto.Models.WeatherData", b =>
                {
                    b.HasOne("weatherCatto.Models.Clouds", "Clouds")
                        .WithMany()
                        .HasForeignKey("CloudsId");

                    b.HasOne("weatherCatto.Models.Coord", "Coord")
                        .WithMany()
                        .HasForeignKey("CoordsId");

                    b.HasOne("weatherCatto.Models.Main", "Main")
                        .WithMany()
                        .HasForeignKey("MainId");

                    b.HasOne("weatherCatto.Models.Sys", "Sys")
                        .WithMany()
                        .HasForeignKey("SysId");

                    b.HasOne("weatherCatto.Models.Wind", "Wind")
                        .WithMany()
                        .HasForeignKey("WindId");

                    b.Navigation("Clouds");

                    b.Navigation("Coord");

                    b.Navigation("Main");

                    b.Navigation("Sys");

                    b.Navigation("Wind");
                });

            modelBuilder.Entity("weatherCatto.Models.WeatherData", b =>
                {
                    b.Navigation("Weather");
                });
#pragma warning restore 612, 618
        }
    }
}
